Comment: SWIPE single-wdl pipeline entry point
StartAt: PreprocessInput
TimeoutSeconds: 259200 # 72 hours (total execution run time, including Batch job scheduling delays)
States:
  PreprocessInput:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Parameters:
      FunctionName: "swipe-${deployment_environment}-preprocess-input"
      Payload: &PassthroughStatePayload
        ExecutionId.$: $$.Execution.Id
        CurrentState.$: $$.State.Name
        Input.$: $
    OutputPath: $.Payload
    Next: RunSPOT
  RunSPOT:
    Type: Task
    Resource: arn:aws:states:::batch:submitJob.sync
    Parameters:
      JobQueue: "${batch_spot_job_queue_arn}"
      JobName.$: $$.Execution.Name
      JobDefinition: &JobDefinition "${batch_job_definition_name}"
      Timeout: &RunBatchTimeout
        AttemptDurationSeconds: 18000 # 5 hours
      ContainerOverrides:
        Memory.$: $.RunSPOTMemory
        Environment: &RunEnvironment
          - Name: WDL_INPUT_URI
            Value.$: $.RUN_INPUT_URI
          - Name: WDL_WORKFLOW_URI
            Value.$: $.RUN_WDL_URI
          - Name: WDL_OUTPUT_URI
            Value.$: $.RUN_OUTPUT_URI
          - Name: SFN_EXECUTION_ID
            Value.$: $$.Execution.Id
          - Name: SFN_CURRENT_STATE
            Value.$: $$.State.Name
    ResultPath: $.BatchJobDetails.Run
    Next: RunReadOutput
    Retry: &BatchRetryConfig
      - ErrorEquals: ["Batch.AWSBatchException"]
        IntervalSeconds: 15
        MaxAttempts: 3
        BackoffRate: 2.1 # 2.0 triggers the linter because when this is converted to json it becomes 2 which is an int and not a float
    Catch:
      - ErrorEquals: ["States.ALL"]
        ResultPath: $.BatchJobError.RunSPOT
        Next: RunGetCause
  RunGetCause:
    Type: Pass
    Parameters:
      "Cause.$": "States.StringToJson($.BatchJobError.RunSPOT.Cause)"
    ResultPath: "$.BatchJobError.RunSPOT"
    Next: RunDetectError
  RunDetectError:
    Type: Choice
    Choices:
      - Variable: "$.BatchJobError.RunSPOT.Cause.StatusReason"
        StringMatches: "Host EC2 (instance i-*) terminated."
        Next: RunEC2
    Default: RunReadOutput
  RunEC2:
    Type: Task
    Resource: arn:aws:states:::batch:submitJob.sync
    Parameters:
      JobQueue: "${batch_ec2_job_queue_arn}"
      JobName.$: $$.Execution.Name
      JobDefinition: *JobDefinition
      Timeout: *RunBatchTimeout
      ContainerOverrides:
        Memory.$: $.RunEC2Memory
        Environment: *RunEnvironment
    ResultPath: $.BatchJobDetails.Run
    Next: RunReadOutput
    Retry: *BatchRetryConfig
    Catch:
      - ErrorEquals: ["States.ALL"]
        ResultPath: $.BatchJobError.RunEC2
        Next: RunReadOutput
  RunReadOutput:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Parameters: &ReadOutputParameters
      FunctionName: "swipe-${deployment_environment}-process-stage-output"
      Payload: *PassthroughStatePayload
    OutputPath: $.Payload
    Next: HandleSuccess
    Catch:
      - ErrorEquals: ["States.ALL"]
        Next: HandleFailure
  HandleSuccess:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Parameters:
      FunctionName: "swipe-${deployment_environment}-handle-success"
      Payload: *PassthroughStatePayload
    OutputPath: $.Payload
    End: true
  HandleFailure:
    # The HandleFailure state is expected to read error details, do any housekeeping necessary, then raise an exception
    # with the error details (so they can be seen directly in the Step Functions API).
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Parameters:
      FunctionName: "swipe-${deployment_environment}-handle-failure"
      Payload: *PassthroughStatePayload
    OutputPath: $.Payload
    End: true
